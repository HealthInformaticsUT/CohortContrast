% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/C2TWrapper.R
\name{C2TCaller}
\alias{C2TCaller}
\title{This function acts as a Cohort2Trajectory wrapper}
\usage{
C2TCaller(
  data,
  pathToResults,
  trajectoryType = 1,
  stateSelectionType = 1,
  lengthOfStay = 30,
  mergeStates = FALSE,
  mergeThreshold = 0.5,
  outOfCohortAllowed = FALSE
)
}
\arguments{
\item{data}{CohortContrast object}

\item{pathToResults}{Path where data should be saved to}

\item{trajectoryType}{Type of trajectories to generate (Discrete - 0, continuous - 1 )}

\item{stateSelectionType}{State selection type (First occurring - 1, Largest overlap - 2, Priority - 3)}

\item{lengthOfStay}{If discrete trajectory is generated we have to indicate the state length in days (integer)}

\item{mergeStates}{Boolean for merging overlapping states}

\item{mergeThreshold}{A value 0 to 1 indicating the threshold of overlap for merging (0.5 would mean if states overlap more than 50% they are merged)}

\item{outOfCohortAllowed}{Boolean for allowing to include state occurrences outside the cohort period}
}
\description{
This function acts as a Cohort2Trajectory wrapper
}
\examples{
\dontrun{
  data <- readRDS("./snapshots/CohortContrastDataSnapshot.rds")
  user <- Sys.getenv("DB_USERNAME")
  pw <- Sys.getenv("DB_PASSWORD")
  server <- stringr::str_c(Sys.getenv("DB_HOST"), "/", Sys.getenv("DB_NAME"))
  port <- Sys.getenv("DB_PORT")

  cdmSchema <-
    Sys.getenv("OHDSI_CDM")
  cdmVocabSchema <-
    Sys.getenv("OHDSI_VOCAB")
  cdmResultsSchema <-
    Sys.getenv("OHDSI_RESULTS")
  writeSchema <-
    Sys.getenv("OHDSI_WRITE")
  writePrefix <- "cc_"

  db = DBI::dbConnect(
    RPostgres::Postgres(),
    dbname = Sys.getenv("DB_NAME"),
    host = Sys.getenv("DB_HOST"),
    user = Sys.getenv("DB_USERNAME"),
    password = Sys.getenv("DB_PASSWORD"),
    port = port
  )

  cdm <- CDMConnector::cdmFromCon(
    con = db,
    cdmSchema = cdmSchema,
    achillesSchema = cdmResultsSchema,
    writeSchema = list(schema = writeSchema, prefix = writePrefix)
  )

  data = CohortContrast::createC2TInput(data, cdm)

  trajectories = CohortContrast::C2TCaller <- function(data, pathToResults = getwd())
}
}
