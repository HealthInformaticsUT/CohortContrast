CONCEPT_NAME = .data$CONCEPT_NAME,
NEW_CONCEPT_ID = .data$concept_id.new,
NEW_CONCEPT_NAME = .data$concept_name) %>% as.data.frame() %>%
dplyr::mutate(ABSTRACTION_LEVEL = abstractionLevel)
abstractionLevelMappingTable = mappings %>% dplyr::left_join(concept %>% dplyr::filter(is.na(.data$invalid_reason)), by = c("concept_id.new" = "concept_id"), suffix = c("", ".concept")) %>%
dplyr::right_join(data$data_patients %>% select(CONCEPT_ID, CONCEPT_NAME) %>% distinct() , by = c("concept_id" = "CONCEPT_ID"), suffix = c("old", "")) %>%
dplyr::select(CONCEPT_ID = .data$concept_id,
CONCEPT_NAME = .data$CONCEPT_NAME,
NEW_CONCEPT_ID = .data$concept_id.new,
NEW_CONCEPT_NAME = .data$concept_name) %>% as.data.frame() %>%
dplyr::mutate(ABSTRACTION_LEVEL = abstractionLevel)
names(complementaryMappingTable)
mappingTable = complementaryMappingTable
required_columns <- c("CONCEPT_ID", "CONCEPT_NAME", "NEW_CONCEPT_ID", "NEW_CONCEPT_NAME", "ABSTRACTION_LEVEL")
# Check if all required columns are present
if (!all(required_columns %in% colnames(mappingTable))) {
return(mappingTable)
}
mappingChanged <- TRUE
while (mappingChanged) {
mappingChanged <- FALSE
# Create a copy of the original concept_id.new mappings for comparison after updating
originalMapping <- mappingTable$NEW_CONCEPT_ID
# Join the table to itself to find secondary mappings
mappingTable <- mappingTable %>%
dplyr::left_join(mappingTable, by = c("NEW_CONCEPT_ID" = "CONCEPT_ID"), suffix = c("", ".copy"), relationship = "many-to-many") %>% dplyr::mutate(
CONCEPT_ID.new = dplyr::if_else(!is.na(.data$NEW_CONCEPT_ID.copy), .data$NEW_CONCEPT_ID.copy, .data$NEW_CONCEPT_ID),
CONCEPT_NAME.new = dplyr::if_else(!is.na(.data$NEW_CONCEPT_NAME.copy), .data$NEW_CONCEPT_NAME.copy, .data$NEW_CONCEPT_NAME)
) %>%
dplyr::select(.data$CONCEPT_ID, .data$CONCEPT_NAME, .data$NEW_CONCEPT_ID, .data$NEW_CONCEPT_NAME, .data$ABSTRACTION_LEVEL)
# Check if any mappings were updated
if (length(originalMapping) == length(mappingTable$NEW_CONCEPT_ID)){
if (!all(originalMapping == mappingTable$NEW_CONCEPT_ID)) {
mappingChanged <- TRUE
}
}
}
mappingChanged
mappingTable
devtools::load_all()
data = CohortContrast::CohortContrast(
cdm,
targetTable = targetCohort,
controlTable = controlCohort,
pathToResults = pathToResults,
domainsIncluded = c(
"Drug",
"Condition",
"Measurement",
"Observation",
"Procedure",
"Visit",
"Visit detail"
),
prevalenceCutOff = FALSE,
getAllAbstractions = TRUE,
maximumAbstractionLevel = 3,
topK = FALSE, # Number of features to export
presenceFilter = 0.2, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
lookbackDays = FALSE,
getSourceData = TRUE,
runZTests = TRUE,
runLogitTests = FALSE,
runKSTests = FALSE,
createOutputFiles = TRUE,
safeRun = FALSE,
complName = 'Breast_man')
devtools::load_all()
data = CohortContrast::CohortContrast(
cdm,
targetTable = targetCohort,
controlTable = controlCohort,
pathToResults = pathToResults,
domainsIncluded = c(
"Drug",
"Condition",
"Measurement",
"Observation",
"Procedure",
"Visit",
"Visit detail"
),
prevalenceCutOff = FALSE,
getAllAbstractions = TRUE,
maximumAbstractionLevel = 3,
topK = FALSE, # Number of features to export
presenceFilter = 0.2, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
lookbackDays = FALSE,
getSourceData = TRUE,
runZTests = TRUE,
runLogitTests = FALSE,
runKSTests = FALSE,
createOutputFiles = TRUE,
safeRun = FALSE,
complName = 'Breast_man')
daa <- readRDS("~/UT/R-packages/Develop/Git/CohortContrast/Breast/snapshots/Malignant_neoplasm_of_breast_Snapshot.rds")
data = daa
need_to_map_concept_ids <- maxMinDataFrame %>% dplyr::filter(.data$maximum_minimal_separation > abstractionLevel)
need_to_map_concept_ids
max_minimal_separation_levels = unique(need_to_map_concept_ids %>% dplyr::select(.data$maximum_minimal_separation) %>% dplyr::pull())
max_minimal_separation_levels
complementaryMappingTable
min_separation_level
min_separation_level
complementaryMappingTable
# Create an empty dataframe with the specified columns
complementaryMappingTable = data.frame(CONCEPT_ID = integer(), CONCEPT_NAME = character(), NEW_CONCEPT_ID = integer(), NEW_CONCEPT_NAME = character() , ABSTRACTION_LEVEL = integer(), stringsAsFactors = FALSE)
complementaryMappingTable
concept_ids_to_map <- need_to_map_concept_ids %>% dplyr::filter(.data$maximum_minimal_separation == min_separation_level)
concept_ids_to_map
mappings <- concept_ancestor %>% dplyr::filter(.data$max_levels_of_separation == min_separation_level - abstractionLevel) %>%
dplyr::inner_join(maxMinDataFrame %>% dplyr::filter(.data$maximum_minimal_separation == abstractionLevel), by = c("ancestor_concept_id" = "descendant_concept_id"))%>%
dplyr::inner_join(concept_ids_to_map, by = "descendant_concept_id") %>% dplyr::select(concept_id = .data$descendant_concept_id,
concept_id.new = .data$ancestor_concept_id)
mappings
mappings %>% dplyr::left_join(concept %>% dplyr::filter(is.na(.data$invalid_reason)), by = c("concept_id.new" = "concept_id"), suffix = c("", ".concept"))
mappings %>% dplyr::left_join(concept %>% dplyr::filter(is.na(.data$invalid_reason)), by = c("concept_id.new" = "concept_id"), suffix = c("", ".concept")) %>%
dplyr::right_join(data$data_patients %>% select(CONCEPT_ID, CONCEPT_NAME) %>% distinct() , by = c("concept_id" = "CONCEPT_ID"), suffix = c("old", ""))
mappings %>% dplyr::left_join(concept %>% dplyr::filter(is.na(.data$invalid_reason)), by = c("concept_id.new" = "concept_id"), suffix = c("", ".concept")) %>%
dplyr::right_join(data$data_patients %>% dplyr::filter(ABSTRACTION_LEVEL == -1) %>% dplyr::filterselect(CONCEPT_ID, CONCEPT_NAME) %>% dplyr::filterdistinct() , by = c("concept_id" = "CONCEPT_ID"), suffix = c("old", "")) %>%
mappings %>% dplyr::left_join(concept %>% dplyr::filter(is.na(.data$invalid_reason)), by = c("concept_id.new" = "concept_id"), suffix = c("", ".concept")) %>%
dplyr::right_join(data$data_patients %>% dplyr::filter(ABSTRACTION_LEVEL == -1) %>% dplyr::filterselect(CONCEPT_ID, CONCEPT_NAME) %>% dplyr::filterdistinct() , by = c("concept_id" = "CONCEPT_ID"), suffix = c("old", ""))
mappings %>% dplyr::left_join(concept %>% dplyr::filter(is.na(.data$invalid_reason)), by = c("concept_id.new" = "concept_id"), suffix = c("", ".concept")) %>%
dplyr::right_join(data$data_patients %>% dplyr::filter(ABSTRACTION_LEVEL == -1) %>% dplyr::select(CONCEPT_ID, CONCEPT_NAME) %>% dplyr::distinct() , by = c("concept_id" = "CONCEPT_ID"), suffix = c("old", ""))
mappings %>% dplyr::left_join(concept %>% dplyr::filter(is.na(.data$invalid_reason)), by = c("concept_id.new" = "concept_id"), suffix = c("", ".concept")) %>%
dplyr::right_join(data$data_patients %>% dplyr::filter(ABSTRACTION_LEVEL == -1) %>% dplyr::select(CONCEPT_ID, CONCEPT_NAME) %>% dplyr::distinct() , by = c("concept_id" = "CONCEPT_ID"), suffix = c("old", "")) %>%
dplyr::select(CONCEPT_ID = .data$concept_id,
CONCEPT_NAME = .data$CONCEPT_NAME,
NEW_CONCEPT_ID = .data$concept_id.new,
NEW_CONCEPT_NAME = .data$concept_name) %>% as.data.frame() %>%
dplyr::mutate(ABSTRACTION_LEVEL = abstractionLevel)
mappings %>% dplyr::left_join(concept %>% dplyr::filter(is.na(.data$invalid_reason)), by = c("concept_id.new" = "concept_id"), suffix = c("", ".concept")) %>%
dplyr::inner_join(data$data_patients %>% dplyr::filter(ABSTRACTION_LEVEL == -1) %>% dplyr::select(CONCEPT_ID, CONCEPT_NAME) %>% dplyr::distinct() , by = c("concept_id" = "CONCEPT_ID"), suffix = c("old", ""))
mappings %>% dplyr::left_join(concept %>% dplyr::filter(is.na(.data$invalid_reason)), by = c("concept_id.new" = "concept_id"), suffix = c("", ".concept")) %>%
dplyr::inner_join(data$data_patients %>% dplyr::filter(ABSTRACTION_LEVEL == -1) %>% dplyr::select(CONCEPT_ID, CONCEPT_NAME) %>% dplyr::distinct() , by = c("concept_id" = "CONCEPT_ID"), suffix = c("old", "")) %>%
dplyr::select(CONCEPT_ID = .data$concept_id,
CONCEPT_NAME = .data$CONCEPT_NAME,
NEW_CONCEPT_ID = .data$concept_id.new,
NEW_CONCEPT_NAME = .data$concept_name) %>% as.data.frame() %>%
dplyr::mutate(ABSTRACTION_LEVEL = abstractionLevel)
devtools::load_all()
data = CohortContrast::CohortContrast(
cdm,
targetTable = targetCohort,
controlTable = controlCohort,
pathToResults = pathToResults,
domainsIncluded = c(
"Drug",
"Condition",
"Measurement",
"Observation",
"Procedure",
"Visit",
"Visit detail"
),
prevalenceCutOff = FALSE,
getAllAbstractions = FALSE,
maximumAbstractionLevel = 3,
topK = FALSE, # Number of features to export
presenceFilter = 0.2, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
lookbackDays = FALSE,
getSourceData = TRUE,
runZTests = TRUE,
runLogitTests = FALSE,
runKSTests = FALSE,
createOutputFiles = TRUE,
safeRun = FALSE,
complName = 'Breast_man')
data = CohortContrast::CohortContrast(
cdm,
targetTable = targetCohort,
controlTable = controlCohort,
pathToResults = pathToResults,
domainsIncluded = c(
"Drug",
"Condition",
"Measurement",
"Observation",
"Procedure",
"Visit",
"Visit detail"
),
prevalenceCutOff = FALSE,
getAllAbstractions = TRUE,
maximumAbstractionLevel = 1,
topK = FALSE, # Number of features to export
presenceFilter = 0.2, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
lookbackDays = FALSE,
getSourceData = TRUE,
runZTests = TRUE,
runLogitTests = FALSE,
runKSTests = FALSE,
createOutputFiles = TRUE,
safeRun = FALSE,
complName = 'Breast_man')
runCohortContrastGUI(pathToResults)
test <- readRDS("~/UT/R-packages/Develop/Git/CohortContrast/Breast/Breast_man.rds")
pathToResults <-paste0(getwd(), "/Breast")
user <- Sys.getenv("DB_USERNAME") #TODO
pw <- Sys.getenv("DB_PASSWORD") #TODO
server <- stringr::str_c(Sys.getenv("DB_HOST"), "/", Sys.getenv("DB_NAME")) #TODO
port <- Sys.getenv("DB_PORT") #TODO
cdmSchema <-
Sys.getenv("OHDSI_CDM") #TODO # Schema which contains the OHDSI Common Data Model
cdmVocabSchema <-
Sys.getenv("OHDSI_VOCAB") #TODO # Schema which contains the OHDSI Common Data Model vocabulary tables.
cdmResultsSchema <-
Sys.getenv("OHDSI_RESULTS") #TODO # Schema which will contain the final results
writeSchema <-
Sys.getenv("OHDSI_WRITE") #TODO # Schema for temporary tables, will be deleted
db = DBI::dbConnect(
RPostgres::Postgres(),
dbname = Sys.getenv("DB_NAME"),
host = Sys.getenv("DB_HOST"),
user = Sys.getenv("DB_USERNAME"),
password = Sys.getenv("DB_PASSWORD"),
port  = port
)
cdm <- CDMConnector::cdmFromCon(
con = db,
cdmSchema = cdmSchema,
achillesSchema = cdmResultsSchema,
writeSchema = writeSchema,
)
library(dplyr)
targetCohort = test$data_initial %>% filter(COHORT_DEFINITION_ID == "target")
colnames(targetCohort) = tolower(colnames(targetCohort))
#targetCohort = cohortFromJSON(pathToJSON = getwd(), cdm = cdm)
controlCohort = test$data_initial %>% filter(COHORT_DEFINITION_ID == "control")
colnames(controlCohort) = tolower(colnames(controlCohort))
data = CohortContrast::CohortContrast(
cdm,
targetTable = targetCohort,
controlTable = controlCohort,
pathToResults = pathToResults,
domainsIncluded = c(
"Drug",
"Condition",
"Measurement",
"Observation",
"Procedure",
"Visit",
"Visit detail"
),
prevalenceCutOff = FALSE,
getAllAbstractions = TRUE,
maximumAbstractionLevel = 5,
topK = FALSE, # Number of features to export
presenceFilter = 0.2, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
lookbackDays = FALSE,
getSourceData = TRUE,
runZTests = TRUE,
runLogitTests = FALSE,
runKSTests = FALSE,
createOutputFiles = TRUE,
safeRun = FALSE,
complName = 'Breast_man')
devtools::load_all()
devtools::load_all()
data = CohortContrast::CohortContrast(
cdm,
targetTable = targetCohort,
controlTable = controlCohort,
pathToResults = pathToResults,
domainsIncluded = c(
"Drug",
"Condition",
"Measurement",
"Observation",
"Procedure",
"Visit",
"Visit detail"
),
prevalenceCutOff = FALSE,
getAllAbstractions = TRUE,
maximumAbstractionLevel = 5,
topK = FALSE, # Number of features to export
presenceFilter = 0.2, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
lookbackDays = FALSE,
getSourceData = TRUE,
runZTests = TRUE,
runLogitTests = FALSE,
runKSTests = FALSE,
createOutputFiles = TRUE,
safeRun = FALSE,
complName = 'Breast_man')
data$complementaryMappingTable
db = DBI::dbConnect(
RPostgres::Postgres(),
dbname = Sys.getenv("DB_NAME"),
host = Sys.getenv("DB_HOST"),
user = Sys.getenv("DB_USERNAME"),
password = Sys.getenv("DB_PASSWORD"),
port  = port
)
cdm <- CDMConnector::cdmFromCon(
con = db,
cdmSchema = cdmSchema,
achillesSchema = cdmResultsSchema,
writeSchema = writeSchema,
)
library(dplyr)
targetCohort = test$data_initial %>% filter(COHORT_DEFINITION_ID == "target")
colnames(targetCohort) = tolower(colnames(targetCohort))
#targetCohort = cohortFromJSON(pathToJSON = getwd(), cdm = cdm)
controlCohort = test$data_initial %>% filter(COHORT_DEFINITION_ID == "control")
colnames(controlCohort) = tolower(colnames(controlCohort))
data = CohortContrast::CohortContrast(
cdm,
targetTable = targetCohort,
controlTable = controlCohort,
pathToResults = pathToResults,
domainsIncluded = c(
"Drug",
"Condition",
"Measurement",
"Observation",
"Procedure",
"Visit",
"Visit detail"
),
prevalenceCutOff = FALSE,
getAllAbstractions = TRUE,
maximumAbstractionLevel = 5,
topK = FALSE, # Number of features to export
presenceFilter = 0.2, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = NULL, # A table for manual concept_id and concept_name mapping (merge)
lookbackDays = FALSE,
getSourceData = TRUE,
runZTests = TRUE,
runLogitTests = FALSE,
runKSTests = FALSE,
createOutputFiles = TRUE,
safeRun = FALSE,
complName = 'Breast_man')
data$complementaryMappingTable
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
dplyr::last_dplyr_warnings()
dplyr::last_dplyr_warnings()
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
result <- sub("/.*", "", "eeee/C01_01010")
result
string = ""Operatsiooniaegne nukleaarlümfograafia/C:000000000000079425""
string = "Operatsiooniaegne nukleaarlümfograafia/C:000000000000079425"
result <- sub("/C:.*", "", string)
results
result
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
list(a = c(), b = ())
list(labels = character(0), labelsTrimmed = character(0)
)
a = list(labels = character(0), labelsTrimmed = character(0))
length(a)
a$labels
in.null(a$labels)
is.null(a$labels)
length(a$labels) == 0
a$labelsTrimmed
selected_correlation_group
selected_correlation_group
runCohortContrastGUI(pathToResults)
devtools::load_all()
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
devtools::load_all()
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
devtools::load_all()
runCohortContrastGUI(pathToResults)
devtools::load_all()
test <- readRDS("~/UT/R-packages/Develop/Git/CohortContrast/inst/example/example.rds")
db  <- DBI::dbConnect(duckdb::duckdb(), dbdir = CDMConnector::eunomia_dir("GiBleed"))
DBI::dbExecute(db , "CREATE SCHEMA IF NOT EXISTS testthat")
cohort = test$data_initial
DBI::dbWriteTable(db ,   DBI::SQL('"testthat"."cohort"'), cohort)
cdm <- CDMConnector::cdm_from_con(db , cdm_name = "eunomia", cdm_schema = "main", write_schema = "main")
cohort
targetTable <- cohortFromCohortTable(cdm = cdm, db = db, tableName = "cohort", schemaName = 'testthat', cohortId = "target")
test$data_initial
names(test$data_initial)
targetTable <- cohortFromCohortTable(cdm = cdm, db = db, tableName = "cohort", schemaName = 'testthat', cohortId = "target")
colnames(cohort) <- c("cohort_definition_id", "subject_id", "cohort_start_date", "cohort_end_date")
db  <- DBI::dbConnect(duckdb::duckdb(), dbdir = CDMConnector::eunomia_dir("GiBleed"))
DBI::dbExecute(db , "CREATE SCHEMA IF NOT EXISTS testthat")
DBI::dbWriteTable(db ,   DBI::SQL('"testthat"."cohort"'), cohort)
cdm <- CDMConnector::cdm_from_con(db , cdm_name = "eunomia", cdm_schema = "main", write_schema = "main")
targetTable <- cohortFromCohortTable(cdm = cdm, db = db, tableName = "cohort", schemaName = 'testthat', cohortId = "target")
controlTable <- cohortFromCohortTable(cdm = cdm, db = db, tableName = "cohort", schemaName = 'testthat', cohortId = "control")
################################################################################
#
# Run the study
#
################################################################################
data = CohortContrast(
cdm = cdm,
targetTable = targetTable,
controlTable = controlTable,
pathToResults =  getwd(),
domainsIncluded = c("Drug"),
prevalenceCutOff = 0,
topK = 15, # Number of features to export
presenceFilter = FALSE, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
runZTests = FALSE,
runLogitTests = FALSE,
createOutputFiles = FALSE,
numCores = 1)
################################################################################
#
# Run the study
#
################################################################################
data = CohortContrast(
cdm = cdm,
targetTable = targetTable,
controlTable = controlTable,
pathToResults =  getwd(),
domainsIncluded = c("Drug"),
prevalenceCutOff = 0,
topK = 15, # Number of features to export
presenceFilter = FALSE, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
runZTests = FALSE,
runLogitTests = FALSE,
createOutputFiles = TRUE,
numCores = 1,
complName = "example")
runCohortContrastGUI(getwd())
################################################################################
#
# Run the study
#
################################################################################
data = CohortContrast(
cdm = cdm,
targetTable = targetTable,
controlTable = controlTable,
pathToResults =  getwd(),
domainsIncluded = c("Drug", "Condition", "Procedure", "Measurement", "Observation", "Visit"),
prevalenceCutOff = 0,
topK = 15, # Number of features to export
presenceFilter = FALSE, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
runZTests = FALSE,
runLogitTests = FALSE,
createOutputFiles = TRUE,
numCores = 1,
complName = "example")
runCohortContrastGUI(getwd())
test <- readRDS("~/UT/R-packages/Develop/Git/CohortContrast/example.rds")
test$complementaryMappingTable
################################################################################
#
# Run the study
#
################################################################################
data = CohortContrast(
cdm = cdm,
targetTable = targetTable,
controlTable = controlTable,
pathToResults =  getwd(),
domainsIncluded = c("Drug", "Condition", "Procedure", "Measurement", "Observation", "Visit"),
prevalenceCutOff = 0,
topK = FALSE, # Number of features to export
presenceFilter = FALSE, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = NULL, # A table for manual concept_id and concept_name mapping (merge)
runZTests = FALSE,
runLogitTests = FALSE,
createOutputFiles = TRUE,
numCores = 1,
complName = "example")
runCohortContrastGUI(getwd())
devtools::load_all()
devtools::document()
devtools::check()
devtools::test()
devtools::check()
renv::snapshot(force = TRUE)
devtools::document()
devtools::build()
devtools::build_vignettes()
pkgdown::build_site()
usethis::use_vignette("Cohort2Trajectory")
usethis::use_vignette("TrajectoryViz")
usethis::use_vignette("a08_TrajectoryViz")
usethis::use_vignette("a07_Cohort2Trajectory")
data <- readRDS("~/UT/R-packages/Develop/Git/Breast/Malignant_neoplasm_of_breast.rds")
data$trajectoryDataList
devtools::document()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
devtools::load_all()
devtools::build()
![Correlation view heatmap](../man/figures/a06_3.png)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
