devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
.Last.error
devtools::load_all()
devtools::document()
pkgdown::build_site()
pkgdown::clean_site()
devtools::document()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
.Last.error
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::preview_site(path='reference/C2TCaller.html')
pkgdown::preview_site(path='reference/C2TCaller.html')
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()pkgdown::clean_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::preview_site(path='reference/C2TCaller.html')
pkgdown::preview_site(path='reference/checkForCorrectRelationDefinitions.html')
pkgdown::preview_site(path='reference/calculate_data_features.html')
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
.Last.error
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
ontrol <- data.frame(
cohort_definition_id = c(1, 1, 1, 1, 1),
subject_id = c(5325, 3743, 2980, 1512, 2168),
cohort_start_date = as.Date(c("1982-06-02", "1997-03-23",
"2004-09-29", "2006-08-11", "1977-06-25")),
cohort_end_date = as.Date(c("2019-03-17", "2018-10-07",
"2018-04-01", "2017-11-29", "2018-11-22"))
)
target <- data.frame(
cohort_definition_id = c(1, 1, 1, 1, 1),
subject_id = c(4804, 4861, 1563, 2830, 1655),
cohort_start_date = as.Date(c("1997-03-23", "1982-06-02",
"1977-06-25", "2006-08-11", "2004-09-29")),
cohort_end_date = as.Date(c("2018-10-29", "2019-05-23",
"2019-04-20", "2019-01-14", "2019-05-24"))
)
target
target <- data.frame(
cohort_definition_id = c(1, 1, 1, 1, 1),
subject_id = c(4804, 4861, 1563, 2830, 1655),
cohort_start_date = as.Date(c("1997-03-23", "1982-06-02",
"1977-06-25", "2006-08-11", "2004-09-29")),
'cohort_end_date' = as.Date(c("2018-10-29", "2019-05-23",
"2019-04-20", "2019-01-14", "2019-05-24"))
)
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("pkgdown")
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
devtools::check()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
install.packages("evaluate")
install.packages("evaluate")
package_version("evaluate")
package_version("evaluate")
library(evaluate)
evaluate
packageVersion("evaluate")
devtools::document()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
devtools::build()
pkgdown::build_site()
pkgdown::clean_site()
devtools::document()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()  # Clean any stale pkgdown files
pkgdown::build_site()
usethis::use_vignette("a01_execution")
################################################################################
#
# Initiate the database connection
#
#################################################################################
user <- Sys.getenv("DB_USERNAME")
pw <- Sys.getenv("DB_PASSWORD")
server <- stringr::str_c(Sys.getenv("DB_HOST"), "/", Sys.getenv("DB_NAME"))
port <- Sys.getenv("DB_PORT")
cdmSchema <-
Sys.getenv("OHDSI_CDM") # Schema which contains the OHDSI Common Data Model
cdmVocabSchema <-
Sys.getenv("OHDSI_VOCAB") # Schema which contains the OHDSI Common Data Model vocabulary tables.
cdmResultsSchema <-
Sys.getenv("OHDSI_RESULTS") # Schema which contains "cohort" table (is not mandatory)
writeSchema <-
Sys.getenv("OHDSI_WRITE") # Schema for temporary tables, will be deleted
writePrefix <- "cc_"
db = DBI::dbConnect(
RPostgres::Postgres(),
dbname = Sys.getenv("DB_NAME"),
host = Sys.getenv("DB_HOST"),
user = Sys.getenv("DB_USERNAME"),
password = Sys.getenv("DB_PASSWORD"),
port  = port
)
################################################################################
#
# Initiate the database connection
#
#################################################################################
user <- Sys.getenv("DB_USERNAME")
pw <- Sys.getenv("DB_PASSWORD")
server <- stringr::str_c(Sys.getenv("DB_HOST"), "/", Sys.getenv("DB_NAME"))
port <- Sys.getenv("DB_PORT")
cdmSchema <-
Sys.getenv("OHDSI_CDM") # Schema which contains the OHDSI Common Data Model
cdmVocabSchema <-
Sys.getenv("OHDSI_VOCAB") # Schema which contains the OHDSI Common Data Model vocabulary tables.
cdmResultsSchema <-
Sys.getenv("OHDSI_RESULTS") # Schema which contains "cohort" table (is not mandatory)
writeSchema <-
Sys.getenv("OHDSI_WRITE") # Schema for temporary tables, will be deleted
writePrefix <- "cc_"
db = DBI::dbConnect(
RPostgres::Postgres(),
dbname = Sys.getenv("DB_NAME"),
host = Sys.getenv("DB_HOST"),
user = Sys.getenv("DB_USERNAME"),
password = Sys.getenv("DB_PASSWORD"),
port  = port
)
cdm <- CDMConnector::cdmFromCon(
con = db,
cdmSchema = cdmSchema,
achillesSchema = cdmResultsSchema,
writeSchema = c(schema = writeSchema, prefix = writePrefix),
)
################################################################################
#
# Create target table from OMOP CDM instance (ATLAS's cohort id)
#
#################################################################################
cohortsTableName = 'cohort'
targetCohortId = 1403
targetTable <- CohortContrast::cohortFromCohortTable(cdm = cdm, db = db,
tableName = cohortsTableName, schemaName = cdmResultsSchema, cohortId = targetCohortId)
devtools::load_all()
################################################################################
#
# Create target table from OMOP CDM instance (ATLAS's cohort id)
#
#################################################################################
cohortsTableName = 'cohort'
targetCohortId = 1403
targetTable <- CohortContrast::cohortFromCohortTable(cdm = cdm, db = db,
tableName = cohortsTableName, schemaName = cdmResultsSchema, cohortId = targetCohortId)
################################################################################
#
# Create control cohort table based on matches
#
#################################################################################
controlTable = CohortContrast::createControlCohortMatching(cdm = cdm, targetTable = targetTable, ratio = 4)
################################################################################
#
# Execute
#
################################################################################
data = CohortContrast::CohortContrast(
cdm,
targetTable = targetTable,
controlTable = controlTable,
pathToResults = getwd(),
domainsIncluded = c(
"Drug",
"Condition",
"Measurement",
"Observation",
"Procedure",
"Visit",
"Visit detail"
),
prevalenceCutOff = 2.5,
topK = FALSE, # Number of features to export
presenceFilter = 0.2, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
getSourceData = FALSE, # If true will generate summaries with source data as well
runZTests = TRUE,
runLogitTests = FALSE,
createOutputFiles = TRUE,
safeRun = FALSE,
complName = "CohortContrastStudy")
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
pkgdown::clean_site()  # Clean any stale pkgdown files
devtools::document()
devtools::load_all()
devtools::document()
pkgdown::clean_site()  # Clean any stale pkgdown files
pkgdown::clean_site()  # Clean any stale pkgdown files
pkgdown::build_site()
devtools::document()
devtools::build_vignettes()
devtools::document()
pkgdown::clean_site()  # Clean any stale pkgdown files
pkgdown::build_site()
usethis::use_vignette("a02-interface")
devtools::build_vignettes()
devtools::document()
pkgdown::clean_site()  # Clean any stale pkgdown files
pkgdown::build_site()
pkgdown::clean_site()  # Clean any stale pkgdown files
pkgdown::build_site()  #
devtools::load_all()
devtools::build()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
pathToResults <- getwd()# paste0(getwd(), "/DEMO")
user <- Sys.getenv("DB_USERNAME") #TODO
pw <- Sys.getenv("DB_PASSWORD") #TODO
server <- stringr::str_c(Sys.getenv("DB_HOST"), "/", Sys.getenv("DB_NAME")) #TODO
port <- Sys.getenv("DB_PORT") #TODO
cdmSchema <-
Sys.getenv("OHDSI_CDM") #TODO # Schema which contains the OHDSI Common Data Model
cdmVocabSchema <-
Sys.getenv("OHDSI_VOCAB") #TODO # Schema which contains the OHDSI Common Data Model vocabulary tables.
cdmResultsSchema <-
Sys.getenv("OHDSI_RESULTS") #TODO # Schema which will contain the final results
writeSchema <-
Sys.getenv("OHDSI_WRITE") #TODO # Schema for temporary tables, will be deleted
db = DBI::dbConnect(
RPostgres::Postgres(),
dbname = Sys.getenv("DB_NAME"),
host = Sys.getenv("DB_HOST"),
user = Sys.getenv("DB_USERNAME"),
password = Sys.getenv("DB_PASSWORD"),
port  = port
)
cdm <- CDMConnector::cdmFromCon(
con = db,
cdmSchema = cdmSchema,
achillesSchema = cdmResultsSchema,
writeSchema = writeSchema,
)
test <- readRDS("~/UT/R-packages/Develop/GLOBAL/Malignant neoplasm of breast_1_year_after.rds")
targetCohort = test$data_initial %>% filter(COHORT_DEFINITION_ID == "target")
library(dplyr)
targetCohort = test$data_initial %>% filter(COHORT_DEFINITION_ID == "target")
colnames(targetCohort) = tolower(colnames(targetCohort))
#targetCohort = cohortFromJSON(pathToJSON = getwd(), cdm = cdm)
controlCohort = test$data_initial %>% filter(COHORT_DEFINITION_ID == "control")
colnames(controlCohort) = tolower(colnames(controlCohort))
devtools::load_all()
data = CohortContrast::CohortContrast(
cdm,
targetTable = targetCohort,
controlTable = controlCohort,
pathToResults = getwd(),
domainsIncluded = c(
"Drug",
"Condition",
"Measurement",
"Observation",
"Procedure",
"Visit",
"Visit detail"
),
prevalenceCutOff = FALSE,
getAllAbstractions = FALSE,
maximumAbstractionLevel = 5,
topK = FALSE, # Number of features to export
presenceFilter = 0.2, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
lookbackDays = FALSE,
getSourceData = FALSE,
runZTests = TRUE,
runLogitTests = TRUE,
runKSTests = TRUE,
createOutputFiles = TRUE,
safeRun = FALSE,
complName = 'Malignant_neoplasm_of_breast')
runCohortContrastGUI(getwd())
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
warnings()
pkgdown::build_site()
pkgdown::build_site()
warnings()
warnings
warnings()
pkgdown::build_site()
knitr::include_graphics("vignettes/images/a02_01.png")
knitr::include_graphics("vignettes/images/a02_1.png")
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_vignette("a03_prevalence_plot")
devtools::load_all()
pathToResults <-paste0(getwd(), "/Breast")
runCohortContrastGUI(pathToResults)
usethis::use_vignette("a04_heatmap_plot")
runCohortContrastGUI(pathToResults)
usethis::use_vignette("a04_time_panel")
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
usethis::use_vignette("a06_correlation_view")
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
runCohortContrastGUI(pathToResults)
devtools::build_vignettes()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
test <- readRDS("~/UT/R-packages/Develop/Git/CohortContrast/Breast/Malignant_neoplasm_of_breast.rds")
test$data_features
names(test$data_features)
test <- readRDS("~/UT/R-packages/Develop/Git/CohortContrast/inst/example/example.rds")
names(test$data_features)
devtools::document()
devtools::check()
devtools::build()
devtools::load_all()
devtools::test()
db <- DBI::dbConnect(duckdb::duckdb(), dbdir = CDMConnector::eunomia_dir("GiBleed"))
DBI::dbExecute(db , "CREATE SCHEMA IF NOT EXISTS testthat")
DBI::dbWriteTable(db ,   DBI::SQL('"testthat"."target_mock"'), target)
library(readr)
control <- read_csv("tests/testthat/inst/CSV/control/control.csv")
View(control)
library(readr)
target <- read_csv("tests/testthat/inst/CSV/target/target.csv")
View(target)
db <- DBI::dbConnect(duckdb::duckdb(), dbdir = CDMConnector::eunomia_dir("GiBleed"))
DBI::dbExecute(db , "CREATE SCHEMA IF NOT EXISTS testthat")
DBI::dbWriteTable(db ,   DBI::SQL('"testthat"."target_mock"'), target)
DBI::dbWriteTable(db ,   DBI::SQL('"testthat"."control_mock"'), control)
cdm <- CDMConnector::cdm_from_con(db , cdm_name = "eunomia", cdm_schema = "main", write_schema = "main")
targetTable <- cohortFromCohortTable(cdm = cdm, db = db, tableName = "target_mock", schemaName = 'testthat')
controlTable <- cohortFromCohortTable(cdm = cdm, db = db, tableName = "control_mock", schemaName = 'testthat')
################################################################################
#
# Run the study
#
################################################################################
data = CohortContrast(
cdm = cdm,
targetTable = targetTable,
controlTable = controlTable,
pathToResults =getwd(), #paste(getwd(), '/tests/testthat', sep = ''),
domainsIncluded = c("Drug"),
prevalenceCutOff = 0,
topK = 10, # Number of features to export
presenceFilter = FALSE, # 0-1, percentage of people who must have the chosen feature present
complementaryMappingTable = FALSE, # A table for manual concept_id and concept_name mapping (merge)
runZTests = FALSE,
runLogitTests = FALSE,
createOutputFiles = FALSE,
numCores = 1)
devtools::load_all()
devtools::test()
